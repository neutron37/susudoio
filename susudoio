#!/bin/bash

# <<YAMLDOC
# namespace: /neutron37/susudoio
# description: "Wraps of su and sudo for non-admin OS-X users."
# copyright: "Neutron37"
# authors: "neutron37@hauskreativ.com"
# tags: su sudo susudoio
# YAMLDOC

set -euo pipefail

###############
## Path vars ##
###############
readonly SCRIPT_REALPATH="$( perl -MCwd=abs_path -le 'print abs_path readlink(shift);' ${BASH_SOURCE[0]} )"
readonly SCRIPT_DIR="$( cd "$( dirname ${SCRIPT_REALPATH} )" && pwd )"
readonly INCLUDES_DIR="${SCRIPT_DIR}/includes"

#################
## Text styles ##
#################
readonly STYLE_NORMAL=$( tput sgr0 );
readonly STYLE_BOLD=$( tput bold );
readonly STYLE_BLACK=$( tput setaf 0 );
readonly STYLE_RED=$( tput setaf 1 );
readonly STYLE_GREEN=$( tput setaf 2 );
readonly STYLE_YELLOW=$( tput setaf 3 );
readonly STYLE_BLUE=$( tput setaf 4 );
readonly STYLE_MAGENTA=$( tput setaf 5 );
readonly STYLE_CYAN=$( tput setaf 6 );
readonly STYLE_WHITE=$( tput setaf 7 );

#######################
## bashlib functions ##
#######################

# abrt: prints abort message and exits
# arg1: message
bashlib::exit_fail() {
  bashlib::msg_stderr "${STYLE_BOLD}${STYLE_RED}$@${STYLE_NORMAL}"
  exit 37;
}

# abrt: prints sussess message and exits
# arg1: message
bashlib::exit_success() {
  bashlib::msg_stdout "${STYLE_BOLD}${STYLE_GREEN}$@${STYLE_NORMAL}"
  exit 0;
}

# msg: prints a message to stdout
# arg1: message
bashlib::msg_stdout() {
  if [ ! -z "$@" ]; then
    echo "$@"
  fi
}

# msg: prints a message to stdout
# arg1: message
bashlib::msg_stdout_success() {
  if [ ! -z "$@" ]; then
    echo "${STYLE_GREEN}$@${STYLE_NORMAL}"
  fi
}

# vmsg: prints a message to stderr
# arg1: message
bashlib::msg_stderr() {
  if [ ! -z "$@" ]; then
    echo "${STYLE_RED}$@${STYLE_NORMAL}" >&2
  fi
}

########################
## susudoio functions ##
########################

susudoio::logo() {
  echo -n "${STYLE_MAGENTA}"
  cat <<"EOF"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  SUSUDOIO                       ...whoa oh oh ┃
┃                                               ┃
┃  Wraps su and sudo for non-admin MacOS users. ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
EOF
  echo "                                ©$( date +%Y ) Neutron37"
  echo "${STYLE_RED}"

  cat <<"EOF"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ WARNING:                                      ┃
┃ This script might not be the most secure...   ┃
┃                         Use with caution!!!   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
EOF
  echo "${STYLE_NORMAL}"
}

susudoio::help() {

  susudoio::logo
  
  MSG_HELP=$( cat <<"HELP"
usage: susudoio [--help] [--admin-user] [--admin-pass] [--target-user] <command>

The <command> argument is required, and all other arguents are optional:

-a              Flag to run as admin, instead of admin sudo.

--admin-user    The administrative user
                  defaults to first non-root member of the admin group.

--admin-pass    The administrative password,
                  if missing, will be asked for interactively.

--target-user   The target user
                  defaults to the current user.
HELP)
  bashlib::msg_stdout "${MSG_HELP}"
  bashlib::exit_fail ""
}

susudoio::members() {
  dscl . -list /Users | while read user; do printf "$user ";
    dsmemberutil checkmembership -U "$user" -G "$*";
  done | grep "is a member" | cut -d " " -f 1;
};

susudoio::set_target_user() {
  TARGET_USER="${ARG_TARGET_USER:-$TARGET_USER_DEFAULT}"
}

susudoio::set_admin_flag() {
  ADMIN_FLAG="${ARG_ADMIN_FLAG:-0}"
}

susudoio::set_admin_user() {
  ADMIN_USER="${ARG_ADMIN_USER:-$ADMIN_USER_DEFAULT}"
}

susudoio::set_admin_password() {
  if [ -z "${ARG_ADMIN_PASS:-}" ]; then
    read -s -p "Please provide ${STYLE_BOLD}${ADMIN_USER}${STYLE_NORMAL}'s password: " ADMIN_PASS
    echo
  else
    ADMIN_PASS="${ARG_ADMIN_PASS}"
  fi
}

susudoio::become() {
  ### @TODO Nest $COMMAND in wrapper.
  SU_CMD="echo ${ADMIN_PASS} | sudo -S --prompt='' ${INCLUDES_DIR}/command_wrapper.sh ${USER_PWD} ${ADMIN_USER} ${TARGET_USER} ${ADMIN_FLAG} '${COMMAND}'"
  ${INCLUDES_DIR}/susudoio.expect "${ADMIN_USER}" "${ADMIN_PASS}" "$SU_CMD"
  return "$?"
}

##########
## Vars ##
##########
readonly USER_PWD=$( pwd )
readonly ADMIN_USER_DEFAULT=$( susudoio::members admin | grep -v root | head -n1 )
readonly TARGET_USER_DEFAULT=$( whoami )

##########
## Args ##
##########

# Parse Command Line Arguments
while [ "$#" -gt 0 ]; do
  case "$1" in
    -a)
        ARG_ADMIN_FLAG=1
        ;;
    --admin-pass=*)
        ARG_ADMIN_PASS="${1#*=}"
        ;;
    --admin-user=*)
        ARG_ADMIN_USER="${1#*=}"
        ;;
    --target-user=*)
        ARG_TARGET_USER="${1#*=}"
        ;;
    --help) susudoio::help;;
    *)
      break
  esac
  shift
done

COMMAND="$@"

##########
## Main ##
##########

# Gather user info including admin authentication credentials.
susudoio::set_admin_flag
susudoio::set_admin_user
susudoio::set_admin_password
susudoio::set_target_user

export SUSUDOIO_TARGET="${TARGET_USER}"
export SUSUDOIO_ADMIN="${ADMIN_USER}"

susudoio::become "${COMMAND}"
exit "$?"